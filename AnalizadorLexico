/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package analizadorlexicosintactico;

/**
 *
 * @author Francisco Favela
 */
public class AnalizadorLexico {
     String reservada[] = {"array", "begin", "case", "const", "do", "else", "writeln","readln", "elseif", "end",
                          "for", "if", "loop", "module","function", "exit", "not", "of","mod","record","repeat","return",
                          "pocedure","by","then","to","until","var","while","with","true","false","div","integer","real",
                          "char","string","byte","boolean","string"};
    public int [][] matrizL={
            //	l	L	d	_	.	'	/	"	{	}	=	<	>	+	-	(	)	[	]	,	;	:	/t	/n	/b      !=
		{1	,1	,3	,506	,16	,6	,8	,15	,11	,506	,12	,11	,12	,113	,114	,118	,119	,120	,121	,122	,124	,125	,0	,0	,0	,505}	,
		{1	,1	,1	,2	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100	,100}	,
		{1	,1	,1	,501	,501	,501	,501	,501	,501	,501	,501	,501	,501	,501	,501	,501	,501	,501	,501	,501	,501	,501	,501	,501	,501	,501}	,
		{101	,101	,3	,101	,101	,101	,101	,101	,101	,101	,101	,101	,101	,101	,101	,101	,101	,101	,101	,101	,101	,101	,101	,101	,101	,101}	,
		{500	,500	,5	,500	,500	,500	,500	,500	,500	,500	,500	,500	,500	,500	,500	,500	,500	,500	,500	,500	,500	,500	,500	,500	,500	,500}	,
		{102	,102	,5	,101	,101	,102	,102	,101	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102	,102}	,
		{6	,6	,6	,6	,6	,7	,6	,6	,6	,6	,6	,6	,6	,6	,6	,6	,6	,6	,6	,6	,6	,6	,6	,6	,6	,6}	,
		{103	,103	,103	,103	,103	,6	,103	,103	,103	,103	,103	,103	,103	,103	,103	,103	,103	,103	,103	,103	,103	,103	,103	,103	,103	,103}	,
		{116	,116	,116	,116	,116	,116	,116	,9	,116	,116	,116	,116	,116	,116	,116	,116	,116	,116	,116	,116	,116	,116	,116	,116	,116	,116}	,
		{9	,9	,9	,9	,9	,9	,9	,10	,9	,9	,9	,9	,9	,9	,9	,9	,9	,9	,9	,9	,9	,9	,9	,9	,9	,9}	,
		{502	,502	,502	,502	,502	,502	,104	,501	,502	,502	,502	,502	,502	,502	,502	,502	,502	,502	,502	,502	,502	,502	,502	,502	,502	,502}	,
		{11	,11	,11	,11	,11	,11	,11	,11	,11	,11	,11	,109	,109	,109	,109	,109	,109	,109	,109	,109	,109	,109	,109	,109	,109	,109}	,
		{503	,503	,503	,503	,503	,503	,503	,503	,503	,503	,106	,503	,503	,503	,503	,503	,503	,503	,503	,503	,503	,503	,503	,503	,503	,503}	,
		{107	,107	,107	,107	,107	,107	,107	,107	,107	,107	,109	,107	,107	,107	,107	,107	,107	,107	,107	,107	,107	,107	,107	,107	,107	,107}	,
		{110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,11	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110	,110}	,
		{114	,114	,114	,114	,114	,114	,114	,115	,114	,114	,114	,114	,114	,114	,114	,114	,114	,114	,114	,114	,114	,114	,114	,114	,114	,114}	,
                {122	,122	,122	,122	,122	,123	,122	,122	,122	,122	,122	,122	,122	,122	,122	,122	,122	,122	,122	,122	,122	,122	,122	,122	,122	,122}	,
                {125	,125	,125	,125	,125	,125	,125	,125	,125	,125	,125	,125	,125	,125	,125	,125	,125	,125	,125	,125	,125	,125	,125	,125	,125	,125}

        };//
    public static int apuntador = 0;
    public static int ELERROR = 1;
    public static void main(String[] args) {
        // TODO code application logic here
	// Ambos char deben ser pilas de caracteres
        char palabra='a';
        char palabra2='a';
        String Leida="";
        boolean letra= true;
        boolean simbolo= true;
        boolean espacio= true;
        int AnchoPalabra=0;
        
        
        while (letra=true){
            apuntador++;            
            AnchoPalabra++;        
        }
        
        for (int i=0; i<AnchoPalabra;i++){
            //Se combierten las letras en una palabra con el pop de la pila
            Leida+=palabra2;
        }
        if(AnchoPalabra==2){
                //Do        Of      By      To
                //Comparar si se parecen con un IF
//if
            //Si el error se cumple pasa a error 
            ELERROR=ELERROR*(-1);
                
                //Vaciar la palabra leida despues de usarla
                Leida="";
                        
            }else if(AnchoPalabra==3) {
                //End       For     If      Not     Mod     Var     Div                 
                //Comparar si se parecen con un IF
//if
                
                //Vaciar la palabra leida despues de usarla
                Leida="";
                        
            }else if(AnchoPalabra==4) {
                //Case      Else    Loop    Exit    Then    With    True    Real    Char    Byte
                //Comparar si se parecen con un IF
//if
                
                //Vaciar la palabra leida despues de usarla
                Leida="";
                        
            }else if(AnchoPalabra==5) {
                //Array     Begin   Const   Until   While   False
                //Comparar si se parecen con un IF
//if
                
                //Vaciar la palabra leida despues de usarla
                Leida="";
                        
            }else if(AnchoPalabra==6) {
                //Readln    ElseIf  Module  Record  Repeat  Return  String
                //Comparar si se parecen con un IF
//if
                
                //Vaciar la palabra leida despues de usarla
                Leida="";
                        
            }else if(AnchoPalabra==7) {
                //Writeln   Integer	Boolean
                //Comparar si se parecen con un IF
//if
                
                //Vaciar la palabra leida despues de usarla
                Leida="";
                        
            }else if(AnchoPalabra==8) {
                //Function	Procedure
                //Comparar si se parecen con un IF
//if
                
                //Vaciar la palabra leida despues de usarla
                Leida="";
                        
            } 
        while (espacio=true){
            
            if(apuntador==0){
                //Pasa a error
                ELERROR=-1;
            }
            //avanzar en la pila
               apuntador++;                
             
        }
        while(simbolo=true){
            apuntador++; 
            char PilaSimbolos='(';
            //verificar el guion bajo
            if(palabra=='_'){
                //Pasa a estado de error
                if(palabra=='_'){
                    //Pasa a estado de error
                }
            }            
            //Codigo de pila de simbolos de Estructura de Datos
            /*
            else if(palabra=='('){
                PilaSimbolos.push(')')
            }
            else if(palabra=='['){
                PilaSimbolos.push(']')
            }
            else if(palabra=='{'){
                PilaSimbolos.push('}')
            }
            else if(palabra==')'||palabra==']'||palabra=='}'){
                if(PilaSimbolos.vacia()){
                    ELERROR=-1;
                }
                else if(palabra!=PilaSimbolos.pop()){
                    ELERROR=-1;
                }
            }
            */
            
        }
    }
    
}

